Hello and welcome back. In this video, we are going to talk about a lot of things so I like to ask for your full attention. In order to draw a path D3 will do this for us automatically but we have to send some data and the data that we have to send are about the characteristics of nodes. This are also created automatically and we don't have to do anything. Each nodes has a set of characteristics and those characteristics are children, depth, ID, name and parent, X&Y. Children is an array of any children that exists further node, depth is the depth and we are going to talk about it a little bit later in the code. The ID is a unique identifier, the name is the name we have assigned for our data, parent is the name of the parent of the node and XY are the positions for the screen of the nodes. Now for every node data a set of links joining the nodes is created, its link consists of a source and target. The last piece of code we wrote was update root so he called the function that draws a tree diagram. The function updates and uses the data root to create the tree. I'm going to have a function and the name of it will be obviously updates, it will take a parameter and this will be source. Now we will assign the X and y position for the nodes with var tree data, team up and inside the parentheses I'm going to have the root. Now the next step is to assign our nodes and links and compute the new tree layout. I'm going to have a var nodes and I will set it to tree data dot descendants. So descendants are like children were parents and the parent has also children and etc and I'm going to do the same thing with the links. Now the different parts for the links will be that they also have a slice and slice is a function from JavaScript, it has nothing to do especially with D3.js. If you are familiar with JavaScript then you must probably know slice, accept of slice we have also supplies and some other similar functions but what this does is taking out one of the time children, so every time I will slice a children. Now we have to determine the horizontal spacing for the nodes. So the next piece of code uses the depth of the node to calculate the position of the x-axis of the screen. The depth refers to the position in the tree relative to the red nodes on the left and we talked about the depth in the presentation. Now the number 180 is completely another random and you can give it whatever you may like, let's continue with the most interesting things, the nodes. We constantly have to update the nodes. We will write a few more variables. We have to declare the variable or function ID so that when we call it later it will know to select the appropriate object or a node with the appropriate ID so that's what we are going to do. We have var node SVG with select all and this should be familiar to you and now for the parameter we will have G dos node and G stands for group. Now right after that I'm going also to have the data and again this should be a familiar method. The parameters here will be nodes but except this one I'm going also to have a function and the function will take D and it will return the ID. So as I said previously we want to have an appropriate ID, that's why I'm going to have a dot ID or we'll have a deed of ID equals plus plus and I. The next block of code assigns the variable or function node enter to the action of the appending a node to a particular position. The first thing is to create the variable node enter and there I'm going to have the node don't enter, again this should be a familiar method with append and inside their pens I'm going to hop at G. This time I only need the G and not the G dot nodes. As for the attribute I'm going to have a class and node and then also I need to have another attribute. The next attribute is going to be about the transform and from slides. I'm going to have the translates plus source dot y 0 and if you remember we talked about source and targets and these are the things that the links already hub. So we have source dot 0 and I also need the source dot X 0 and that's it. Now you should be careful using the parentheses and the correct quotation inside here because I know that sometimes it can be tricky. And the last thing that we are going to use is the on and click function, we just write it here but we are going to use it later in this section so you don't have to worry about this one. And the last piece of code is to add the circles to the nodes. We get to the pace of code that appends the circle that compromises the node using of course the node enter. So you will have no to enter dot append and you will append the circle and then you also need the attribute. For the attribute I'm going to have a class and then the node. The last thing is again an attribute with R and 6, so the power stands for radius and 6 is just the radius but you can give it whichever you may like. And then we also have to add the text for its node. The next piece of code will allow the text to be placed on the left side of the node, if it has children with data children or on the right if it has no children with DDOT does children. This is slightly returned on piece of code for our current case but it becomes more useful in the interactive version towards the end of this section, it also aligns the text correctly and makes sure it is visible. So far we have append with text and an attribute of X, this will be a function that will return either data children or data us children and also the 13 is random, you can give it again whatever you may like but the thing that 13 will work fine. The text anchor is the one that will make the alignment correctly towards the end or the start and that's why again I need either to have the children, that's the left part or the date does children which is the other parts. Now last but not least I want to show the name, I want you to be visible and I'm going to do that with return dito data dot name. Again I would suggest you to take a look on the code or try to write it again by your own, I know that you talks about a lot of things. Alright so far we saw a few things, we started very basically with a tree diagram and the basic structure of it but now we started connecting the points which started connecting links and data or links and nodes. In the next video we are going to talk about updating the nodes, thank you very much.